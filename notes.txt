#################
GRAMMAR
#################

----- Numbers -----

expr = term ((ADD or MINUS) term)

term = factor ((MULTIPLIED or DIVIDED) factor) 

factor = INT or FLOAT
       = (ADD or MINUS) factor # Positive or negative number
	   = LPAREN expr RPAREN 
	   = LENGTH stringExpr

----- Strings -----

stringExpr = STRING
		   = stringExpr JOIN stringExpr
		   = stringExpr MULTIPLIED factor

----- Comparision -----

comparision = expr comparisionOperator expr
			= stringExpr comparisionOperator stringExpr

IF comparision [

] ELSEIF comparision [

] ELSE [

]



#################
DEFINITIONS
#################

AST: Abstract Syntax Tree
Lexer: A lexer seperates a stream of characters(text) into tokens
Parser: A parser takes tokens and builds expressions out of them, these expressions are executionable pieces of code
Token: A single element of a programing language (e.g. data value, keyword or punctuation)



#################
CLASSES
#################

# ERROR CLASSES

Error - pos_start, pos_end, name, details:
This class shows the type of error as well as which line it is on, and a description can be added. The showArrows method
allows arrows to be shown from the start position to the end position of a particular token or error, this is useful in
identifying where the error came from.

IllegalCharError - 
InvalidSyntaxError - 
RunTimeError - pos_start, pos_end, details:
These are child classes of the main Error class and show the type of error it is, deduced by the name.

# BASIC CLASSES

Token - type_, value, pos_start, pos_end:
This class is to instantiate the token into an object which can be acted upon.

Position - index, line_number, column, file_name, file_text:
This class helps keep position of the different tokens in the token stream, this can help identify errors
as well as move onto the next token when interpreting the code. This class also keeps data such as line number
and column number of a token.

# LEXER

Lexer - file_name, text:
This is the main class which takes text and converts it into a list of tokens which can then be parsed and interpreted
if there are no errors. It's method makeTokens is going through a loop looking at the individual characters in the text
and then either appending a Token to the tokens list, or executing a method to find out which token is needed to be 
appended to the list. In the makeNumber method, it will go through a number, making sure each character is an interger,
as well as seeing if there is only one (max) decimal point, and then it will create an interger Token or float Token
based on the number it read through. The makeBinOp method is a similar method which looks for the keywords ADD, MINUS,
MULTIPLIED and DIVIDED to figure out which binary operation to complete on the number values. It does this by going through
the consecutive characters and added them together to create one of the keywords, if the word created matches then the 
operation Token is returned, otherwise an error is returned. The makeTokens method will return an IllegalCharError object
if there is a character which does not come under any declared characters of the language. To create multiline code which
can be executed if a statement is correct, for example in an if-else statement, then the lexer creates a list where each
line in the code which is to be executed is another list which contains the tokens for that line of code. The lexer does this
by recognising the usage of '[', this then triggeres the makeConditional method, this method recursively calls the maketokens
method in a new lexer class and the text inputted is all the characters between the first opening '[' and the last closing ']'.
This main method then returns a list of tokens for the different lines of code between the square brackets, an error if there 
is one and the new position values for the main lexer.

# AST NODE CLASSES

BasicNode - :
This class is used as the parent class for all AST nodes and it contains the self.output attribute which determines if the 
value which is equal to the type of node and it's expression should be outputted or not.

numberNode - token:
This class is used to represent a number on an AST, it holds the Token object for the number.

binOpNode - left_node, op_token, right_node:
This class is the node used for a binary operation on an AST. The left_node is the node on the left hand side of the operator,
right_node is the node on the right.

unaryOpNode - op_token, node:
This class is used to check to see if there is an operator token before a node object. This is used to store values such as 
negative numbers and expressions.

varAssignNode - varNode, node:
This class is the node used to represent variable assignment, the variable node is the first argument and the second is the node
which will be assigned to the variable

varNode - node:
This class is used to represent a variable on an AST, it holds the Token object for the variable.

stringNode - token:
This is the class used to represent a string on an ASt, it holds the Token object for the string.

stringLengthNode - token:
This node is used to represent the function to find the length of a string on an AST.

stringOpNode - left_node, op_token, right_node:
This class is used for the string operations on an AST. The left_node is the node on the left side of the op_token and the right_node
is on the right hand side.

equalityNode - left_node, op_token, right_node:
This class is used for the equality comparisions on an AST. The left_node is the node on the left side of the op_token and the right_node
is on the right hand side.

conditionalNode - if_node, elseif_nodes, else_node:
This class is used to be the main 'root' for an if-else statement tree. It contains the if node, which has to be specified, and any elseif
and else nodes which are optional. The elseif nodes are stored in a list because there can be multiple elseif nodes in a single statement.
The addNode method is used to easily add elseif and else nodes to the attributes of the conditionalNode whilst also checking the instances
of the nodes which are being added to make sure there are no errors.

ifNode - if_node, if_comp_node, if_code_nodes:
This class is used for the if statement on an if-else statement tree. The if_node attribute points to the IF token, the if_comp_node is the 
equalityNode which is used in the if statement and the if_code_nodes is the list of nodes from the lines of code which are to be executed if
the statement is correct.

elseifNode - elseif_node, elseif_comp_node, elseif_code_nodes:
This class is used for the elseif statements on an if-else statement tree. The elseif_node attribute points to the ELSEIF token, the 
elseif_comp_node is the equalityNode which is used in the elseif statement and the elseif_code_nodes is the list of nodes from the lines of 
code which are to be executed if the statement is correct.

elseNode - else_node, else_code_nodes:
This class is used for the else statement on an if-else statement tree. The else_node points to the ELSE token and the else_code_nodes is the 
list of nodes from the lines of code which are to be executed if the no other statement is correct, this is why there is no equalityNode
assigned in this node.

# PARSER

Parser - tokens:
This class takes the list of tokens fetched from the lexer and then parses them to create an AST, which can then be interpreted.
The parser follows a set of grammar rules (top of notes.txt page) to parse the tokens. It first tries to execute the expr method,
this returns a binOp method, which checks the left, operator, and right node in the expression and trturns an binOpNode which
the 3 nodes of the expression in the AST. This is done on a loop. The first argument 'func' in the binOp method leads to the
return of the right expression, this checks if there is a '+' or '-' infront of the number, if the number is an integer or float,
and if there are any parantheses in the expression, if there are, then it recursively calls in expr method inside the parantheses
to get the binOpNode for the value inside. The parse method will also return an InvalidSyntaxError object indicating a missing 
binary operator. The factor method will also return InvalidSyntaxError objects if there is a missing parenthesis or number. The 
parser has methods to check if certain tokens are in the token stream, and can do certain operations based on that information, 
for example if there is a String token but no Length token, then the parser will use the stringOp method to do an operation on 
a string, but if there is a Length token as well as a String token, then it will carry out the expr method as the Length of a 
String returns a number, hence we can do arithmitcal operations using it. This is the same with equality tokens, if the token 
stream has an equality token then the parser will set the precedence for equality at the top and will then check for other 
equality tokens, if none are found then it will find the expressions involved in the equality comparision. For if-else statements
the parser will call the method buildConditional once it detects an IF token since that is what you need to create an if-else 
statement in the first place. This method will then get then call the equalityOp method to return the comparision node for the
statement, then it will go through the different lines of code which is to be executed in the if-else statement and recursively
get all the nodes for each different line of code and then add them to a list to create a list of AST nodes which is attatched to
the ifNode node and then advances. If it finds an ELSEIF token then it will try to do the same procedure as it did for the IF token
but this time it will repeat the search for more ELSEIF nodes as an if-else statement tree can contain multiple elseif branches, it
will add all the elseif nodes to another list to be added to the main conditionalNode which the buildConditional method will return
in the end, this is all done in another seperate function called BuildElseIfConditional. If there is an ELSE node after the ELSEIF 
nodes, then it will call the buildElseConditional method to repeate the process and to return with an elseNode for the AST.

ParseResult - :

# TYPE CLASSES

Number - value:
This class is responsible for returning the answer to a binary operation on two numbers. This class has different methods for
addition, subtraction, multiplication and division which are called in the Interpreter class and return another Number object
where it's value is set to the answer of the binary operation. It will also output a RunTimeError object with the detail of 
'Division by zero' if that was attempted by the user.

String - value:
This class is used to return a String object where a string has to be outputted or used in an expression elsewhere. It has 3 main 
methods, one is for concatenating the String to other Strings, one is for multiplying the String by an integer which produces 
a String where the value is copied multiple times, and the last is for getting the length of the String and this will return a
Number object so it can be used in numerical calculations.

Boolean - value:
This class is used to return a Boolean object for when an equality comparision is made.

Comparision - left_node, op_token, right_node:
This class is used to represent an equality comparision being made using the 3 nodes. It can check if the comparision is even
possible or not; if the two different nodes have different type values then they are not compatible with each other. This class
also has a compare method which returns a Boolean object according to the comparision being made. You can also compare Strings
with other Strings and it will compare the length of them as integers.

# INTERPRETER

Interpreter - debug:
This class is used to traverse the AST and return the end value for the expression which was inputted by the user. It achieves
this by going to the different nodes in the tree and figuring out which binary operation to do on the left and right node of the
operator. There are different methods for visiting the different types of nodes. The visit_numberNode method just returns the number
and has no error checks because a plain number can have no errors. The visit_binOpNode checks the binary operator and exectures the
correct method in the Number class to calculate the answer to the operation. The visit_unaryOpNode checks if there is a '-' token 
infront of the number token and then multiplies the number by -1 to make it negative. When assigning values to variables, the
interpreter will add a key-value pair to the VARS_SAVED dictionary constant where the key is the name of the variable and the value
is the value which would be assigned to the variable. The value for a particular variable is also retrievable from the VARS_SAVED
dictionary and will return the object of the value saved, for example if a string was saved then it would return a String object, these
can then be used in further expressions. If an equalityNode is detected, then the visit_equalityNode method will build a Comparision
object which contain the operator token and the left and right sides of that token. The compare method is then called on that Comparision
object which returns a Boolean value, this can then be used in other statements such as if-else statements. If a conditionalNode is
inputted, then the visit_conditionalNode method is called. This method gets the if_node from the conditionalNode and checks wether
the comparision for that if_node is True, if it is then each line in the if_code_nodes is visited and if an output value is returned or 
the debug option is on, then the result is printed to the screen and the line increments to the next line if there is one. If the if_node
is false, then elseif_nodes are searched for and the same process repeats for each elseif_node found. If no elseif_nodes are found or none
of them are True, then an else node is searched for and if found, the code inside it is executed immedietely since there is no comparisions
to work through and complete. 

RunTimeResult - :

#################
FUNCTIONS
#################

run - file_name, text, debug=False:
This function is used to run the program, it creates an instance of a Lexer class and then gets the tokens from the lexer which are then
used in an instance of the Parser class to create an AST which is then traversed by an instance of the Interpreter class which then
returns the correct output for the expression. If there are any errors during this process then they will be outputted as well. If there
is a OUTPUT keyword at the start of a line, then that lines value will be outputted, otherwise nothing will be outputted to the terminal. 
There is a debug option, which is set to false as default, which can output extra data such as the token stream, the ast nodes as well as
the result to operations even if there is no OUTPUT keyword specified. 